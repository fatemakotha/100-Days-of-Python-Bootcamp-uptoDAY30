{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOChBxShBwU5FUMiTTPHVK/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/fatemakotha/100-Days-of-Python-Bootcamp-uptoDAY30/blob/main/3.%20Create%20ML%20Workflow(Linear%20regression%2C%20Modelling%2C%20Evaluation%2C%20Plotting)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ---------------------------------------Linear Regression----------------------------------\n"
      ],
      "metadata": {
        "id": "8Yob1vf2CGcP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.datasets import fetch_california_housing"
      ],
      "metadata": {
        "id": "HHpE4EVJCDwJ"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "GenRoJ2ECNFq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1. The dataset:\n",
        "#### We are using California house price dataset: this is available from sklearn library\n",
        "#### *This dataset was obtained from the StatLib repository. https://www.dcc.fc.up.pt/~ltorgo/Regression/cal_housing.h*"
      ],
      "metadata": {
        "id": "VZ66B5YdCO7E"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# using California house price dataset: this is available from sklearn library\n",
        "housing = fetch_california_housing()\n",
        "# the following 'type' is a very important tool/method if you are a beginner\n",
        "# remember, there are multiple data types (pandas dataframe, numpy array, original python library's list, etc.) available since we are using the ML packages too\n",
        "# All these may use different functions/methods (perhaps with different names) even performing the same operations. so, it is always important\n",
        "# to check the type of a variable [if you are having troubles] and go to its related documentation to check for appropriate methods/variables\n",
        "# also, knowing data type will help you 'write proper queries' in say may be Google, or search in stackoverflow to ask/find appropriate questions\n",
        "\n",
        "# you'll find out that this is a sklearn specific class.\n",
        "# Hint: its elements can be accessed via keys, like a dictionary\n",
        "print(type(housing))\n",
        "print(\"--------------####################------------------\")\n",
        "print(\"--------------####################-------------------\")\n",
        "print(\"--------------####################-------------------\")\n",
        "# let's see what's inside\n",
        "print(housing.keys())\n",
        "print(\"--------------####################-------------------\")\n",
        "print(\"--------------####################-------------------\")\n",
        "print(\"--------------####################-------------------\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8SxrLPe3CPZE",
        "outputId": "9fa67416-063b-40ea-eb16-65c8ca722281"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'sklearn.utils._bunch.Bunch'>\n",
            "--------------####################------------------\n",
            "--------------####################-------------------\n",
            "--------------####################-------------------\n",
            "dict_keys(['data', 'target', 'frame', 'target_names', 'feature_names', 'DESCR'])\n",
            "--------------####################-------------------\n",
            "--------------####################-------------------\n",
            "--------------####################-------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##### One of the variable is called \"DESCR\": it will give us a good overview of the dataset:\n"
      ],
      "metadata": {
        "id": "csHjG_iNCg1o"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(housing.DESCR)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8URYpbxkCR9N",
        "outputId": "f32c33f4-915e-496a-acc7-124980752b4b"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ".. _california_housing_dataset:\n",
            "\n",
            "California Housing dataset\n",
            "--------------------------\n",
            "\n",
            "**Data Set Characteristics:**\n",
            "\n",
            "    :Number of Instances: 20640\n",
            "\n",
            "    :Number of Attributes: 8 numeric, predictive attributes and the target\n",
            "\n",
            "    :Attribute Information:\n",
            "        - MedInc        median income in block group\n",
            "        - HouseAge      median house age in block group\n",
            "        - AveRooms      average number of rooms per household\n",
            "        - AveBedrms     average number of bedrooms per household\n",
            "        - Population    block group population\n",
            "        - AveOccup      average number of household members\n",
            "        - Latitude      block group latitude\n",
            "        - Longitude     block group longitude\n",
            "\n",
            "    :Missing Attribute Values: None\n",
            "\n",
            "This dataset was obtained from the StatLib repository.\n",
            "https://www.dcc.fc.up.pt/~ltorgo/Regression/cal_housing.html\n",
            "\n",
            "The target variable is the median house value for California districts,\n",
            "expressed in hundreds of thousands of dollars ($100,000).\n",
            "\n",
            "This dataset was derived from the 1990 U.S. census, using one row per census\n",
            "block group. A block group is the smallest geographical unit for which the U.S.\n",
            "Census Bureau publishes sample data (a block group typically has a population\n",
            "of 600 to 3,000 people).\n",
            "\n",
            "A household is a group of people residing within a home. Since the average\n",
            "number of rooms and bedrooms in this dataset are provided per household, these\n",
            "columns may take surprisingly large values for block groups with few households\n",
            "and many empty houses, such as vacation resorts.\n",
            "\n",
            "It can be downloaded/loaded using the\n",
            ":func:`sklearn.datasets.fetch_california_housing` function.\n",
            "\n",
            ".. topic:: References\n",
            "\n",
            "    - Pace, R. Kelley and Ronald Barry, Sparse Spatial Autoregressions,\n",
            "      Statistics and Probability Letters, 33 (1997) 291-297\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2. Creating the DataFrame:"
      ],
      "metadata": {
        "id": "DCNDtWscClyU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.DataFrame(housing.data, columns=housing.feature_names) # creating pandas dataframe\n",
        "df['PRICE'] = housing.target # that is the target - attaching it to the original dataframe\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "AYZ_RFARCi-z",
        "outputId": "871a1f34-7ef6-4d47-af1d-49414c4dbc9f"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   MedInc  HouseAge  AveRooms  AveBedrms  Population  AveOccup  Latitude  \\\n",
              "0  8.3252      41.0  6.984127   1.023810       322.0  2.555556     37.88   \n",
              "1  8.3014      21.0  6.238137   0.971880      2401.0  2.109842     37.86   \n",
              "2  7.2574      52.0  8.288136   1.073446       496.0  2.802260     37.85   \n",
              "3  5.6431      52.0  5.817352   1.073059       558.0  2.547945     37.85   \n",
              "4  3.8462      52.0  6.281853   1.081081       565.0  2.181467     37.85   \n",
              "\n",
              "   Longitude  PRICE  \n",
              "0    -122.23  4.526  \n",
              "1    -122.22  3.585  \n",
              "2    -122.24  3.521  \n",
              "3    -122.25  3.413  \n",
              "4    -122.25  3.422  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-7db407de-0d92-4026-9f62-f2fa274b5a14\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MedInc</th>\n",
              "      <th>HouseAge</th>\n",
              "      <th>AveRooms</th>\n",
              "      <th>AveBedrms</th>\n",
              "      <th>Population</th>\n",
              "      <th>AveOccup</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "      <th>PRICE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>8.3252</td>\n",
              "      <td>41.0</td>\n",
              "      <td>6.984127</td>\n",
              "      <td>1.023810</td>\n",
              "      <td>322.0</td>\n",
              "      <td>2.555556</td>\n",
              "      <td>37.88</td>\n",
              "      <td>-122.23</td>\n",
              "      <td>4.526</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8.3014</td>\n",
              "      <td>21.0</td>\n",
              "      <td>6.238137</td>\n",
              "      <td>0.971880</td>\n",
              "      <td>2401.0</td>\n",
              "      <td>2.109842</td>\n",
              "      <td>37.86</td>\n",
              "      <td>-122.22</td>\n",
              "      <td>3.585</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7.2574</td>\n",
              "      <td>52.0</td>\n",
              "      <td>8.288136</td>\n",
              "      <td>1.073446</td>\n",
              "      <td>496.0</td>\n",
              "      <td>2.802260</td>\n",
              "      <td>37.85</td>\n",
              "      <td>-122.24</td>\n",
              "      <td>3.521</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5.6431</td>\n",
              "      <td>52.0</td>\n",
              "      <td>5.817352</td>\n",
              "      <td>1.073059</td>\n",
              "      <td>558.0</td>\n",
              "      <td>2.547945</td>\n",
              "      <td>37.85</td>\n",
              "      <td>-122.25</td>\n",
              "      <td>3.413</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3.8462</td>\n",
              "      <td>52.0</td>\n",
              "      <td>6.281853</td>\n",
              "      <td>1.081081</td>\n",
              "      <td>565.0</td>\n",
              "      <td>2.181467</td>\n",
              "      <td>37.85</td>\n",
              "      <td>-122.25</td>\n",
              "      <td>3.422</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7db407de-0d92-4026-9f62-f2fa274b5a14')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-d7be52d5-e660-411e-85ac-84865f6e4662\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d7be52d5-e660-411e-85ac-84865f6e4662')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-d7be52d5-e660-411e-85ac-84865f6e4662 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7db407de-0d92-4026-9f62-f2fa274b5a14 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7db407de-0d92-4026-9f62-f2fa274b5a14');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Dataframe shape and description:"
      ],
      "metadata": {
        "id": "ckHQ64G4Cqqt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('Dataset shape: ', df.shape)\n",
        "print(\"############################################################\")\n",
        "# check if there is any null record - turns out there is no such record!\n",
        "# (note .isnull() is equivalent to .isna())\n",
        "print('Any nulls?:\\n{}'.format(df.isnull().sum()))\n",
        "print(\"############################################################\")\n",
        "# summarised statistics of the dataset\n",
        "print(df.describe())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "99d9oO5MCn6o",
        "outputId": "e21355d0-d745-458d-ea1b-48c586d045b2"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset shape:  (20640, 9)\n",
            "############################################################\n",
            "Any nulls?:\n",
            "MedInc        0\n",
            "HouseAge      0\n",
            "AveRooms      0\n",
            "AveBedrms     0\n",
            "Population    0\n",
            "AveOccup      0\n",
            "Latitude      0\n",
            "Longitude     0\n",
            "PRICE         0\n",
            "dtype: int64\n",
            "############################################################\n",
            "             MedInc      HouseAge      AveRooms     AveBedrms    Population  \\\n",
            "count  20640.000000  20640.000000  20640.000000  20640.000000  20640.000000   \n",
            "mean       3.870671     28.639486      5.429000      1.096675   1425.476744   \n",
            "std        1.899822     12.585558      2.474173      0.473911   1132.462122   \n",
            "min        0.499900      1.000000      0.846154      0.333333      3.000000   \n",
            "25%        2.563400     18.000000      4.440716      1.006079    787.000000   \n",
            "50%        3.534800     29.000000      5.229129      1.048780   1166.000000   \n",
            "75%        4.743250     37.000000      6.052381      1.099526   1725.000000   \n",
            "max       15.000100     52.000000    141.909091     34.066667  35682.000000   \n",
            "\n",
            "           AveOccup      Latitude     Longitude         PRICE  \n",
            "count  20640.000000  20640.000000  20640.000000  20640.000000  \n",
            "mean       3.070655     35.631861   -119.569704      2.068558  \n",
            "std       10.386050      2.135952      2.003532      1.153956  \n",
            "min        0.692308     32.540000   -124.350000      0.149990  \n",
            "25%        2.429741     33.930000   -121.800000      1.196000  \n",
            "50%        2.818116     34.260000   -118.490000      1.797000  \n",
            "75%        3.282261     37.710000   -118.010000      2.647250  \n",
            "max     1243.333333     41.950000   -114.310000      5.000010  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. Any nulls?"
      ],
      "metadata": {
        "id": "WgPpsHymCucp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "U4FzEnOECsSK",
        "outputId": "3ca1b366-2804-45fb-9c85-f6c4f2aacfe3"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       MedInc  HouseAge  AveRooms  AveBedrms  Population  AveOccup  Latitude  \\\n",
              "0       False     False     False      False       False     False     False   \n",
              "1       False     False     False      False       False     False     False   \n",
              "2       False     False     False      False       False     False     False   \n",
              "3       False     False     False      False       False     False     False   \n",
              "4       False     False     False      False       False     False     False   \n",
              "...       ...       ...       ...        ...         ...       ...       ...   \n",
              "20635   False     False     False      False       False     False     False   \n",
              "20636   False     False     False      False       False     False     False   \n",
              "20637   False     False     False      False       False     False     False   \n",
              "20638   False     False     False      False       False     False     False   \n",
              "20639   False     False     False      False       False     False     False   \n",
              "\n",
              "       Longitude  PRICE  \n",
              "0          False  False  \n",
              "1          False  False  \n",
              "2          False  False  \n",
              "3          False  False  \n",
              "4          False  False  \n",
              "...          ...    ...  \n",
              "20635      False  False  \n",
              "20636      False  False  \n",
              "20637      False  False  \n",
              "20638      False  False  \n",
              "20639      False  False  \n",
              "\n",
              "[20640 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-d3a56fc8-830e-44a5-85fd-67b04ca7f250\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MedInc</th>\n",
              "      <th>HouseAge</th>\n",
              "      <th>AveRooms</th>\n",
              "      <th>AveBedrms</th>\n",
              "      <th>Population</th>\n",
              "      <th>AveOccup</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "      <th>PRICE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20635</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20636</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20637</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20638</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20639</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>20640 rows × 9 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d3a56fc8-830e-44a5-85fd-67b04ca7f250')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-3f6465a7-6bbb-4ed0-a072-b3937965a24e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3f6465a7-6bbb-4ed0-a072-b3937965a24e')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-3f6465a7-6bbb-4ed0-a072-b3937965a24e button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d3a56fc8-830e-44a5-85fd-67b04ca7f250 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d3a56fc8-830e-44a5-85fd-67b04ca7f250');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# -----------------------------------------EDA---------------------------------------\n"
      ],
      "metadata": {
        "id": "0kDP-COWCyj_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **1.Correlation:**\n",
        "**correlation map between features**\n",
        "**--if needed for customisation, and also depending on the pandas, the display may vary.**\n",
        "**--explanation: <https://stackoverflow.com/questions/29432629/plot-correlation-matrix-using-pandas>**"
      ],
      "metadata": {
        "id": "YLdV4EgUC_cN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###### Note that I've chosen a \"perceptually uniform colormap\" (the viridis color map) to help the interpretation of the results\n"
      ],
      "metadata": {
        "id": "_kGIqA7ZDCmN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# correlation map between features\n",
        "# if needed for customisation, and also depending on the pandas, the display may vary.\n",
        "# explanation: https://stackoverflow.com/questions/29432629/plot-correlation-matrix-using-pandas\n",
        "corr = df.corr()\n",
        "# The line below controls some visual aspects of the plot.\n",
        "# Note that I've chosen a \"perceptually uniform colormap\" (the viridis color map) to help the interpretation of the results\n",
        "style = corr.style.format(precision=2).background_gradient(cmap=\"viridis\", axis=None)\n",
        "style"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 331
        },
        "id": "tq7O_T-eC7f9",
        "outputId": "1d47fca8-7d66-4938-cfaf-141eaefb4538"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7e52b49ecac0>"
            ],
            "text/html": [
              "<style type=\"text/css\">\n",
              "#T_fef32_row0_col0, #T_fef32_row1_col1, #T_fef32_row2_col2, #T_fef32_row3_col3, #T_fef32_row4_col4, #T_fef32_row5_col5, #T_fef32_row6_col6, #T_fef32_row7_col7, #T_fef32_row8_col8 {\n",
              "  background-color: #fde725;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_fef32_row0_col1, #T_fef32_row1_col0 {\n",
              "  background-color: #287d8e;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_fef32_row0_col2, #T_fef32_row2_col0 {\n",
              "  background-color: #2fb47c;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_fef32_row0_col3, #T_fef32_row3_col0, #T_fef32_row3_col4, #T_fef32_row4_col3 {\n",
              "  background-color: #25838e;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_fef32_row0_col4, #T_fef32_row4_col0, #T_fef32_row5_col6, #T_fef32_row5_col7, #T_fef32_row6_col5, #T_fef32_row7_col5 {\n",
              "  background-color: #228c8d;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_fef32_row0_col5, #T_fef32_row5_col0 {\n",
              "  background-color: #218e8d;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_fef32_row0_col6, #T_fef32_row1_col3, #T_fef32_row2_col4, #T_fef32_row3_col1, #T_fef32_row4_col2, #T_fef32_row6_col0 {\n",
              "  background-color: #26828e;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_fef32_row0_col7, #T_fef32_row7_col0 {\n",
              "  background-color: #23898e;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_fef32_row0_col8, #T_fef32_row8_col0 {\n",
              "  background-color: #93d741;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_fef32_row1_col2, #T_fef32_row2_col1 {\n",
              "  background-color: #2a788e;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_fef32_row1_col4, #T_fef32_row4_col1 {\n",
              "  background-color: #31668e;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_fef32_row1_col5, #T_fef32_row1_col6, #T_fef32_row3_col7, #T_fef32_row5_col1, #T_fef32_row6_col1, #T_fef32_row7_col3 {\n",
              "  background-color: #228d8d;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_fef32_row1_col7, #T_fef32_row4_col6, #T_fef32_row6_col4, #T_fef32_row7_col1 {\n",
              "  background-color: #277e8e;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_fef32_row1_col8, #T_fef32_row2_col6, #T_fef32_row6_col2, #T_fef32_row8_col1 {\n",
              "  background-color: #1f998a;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_fef32_row2_col3, #T_fef32_row3_col2 {\n",
              "  background-color: #cae11f;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_fef32_row2_col5, #T_fef32_row3_col5, #T_fef32_row5_col2, #T_fef32_row5_col3 {\n",
              "  background-color: #228b8d;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_fef32_row2_col7, #T_fef32_row4_col8, #T_fef32_row5_col8, #T_fef32_row7_col2, #T_fef32_row8_col4, #T_fef32_row8_col5 {\n",
              "  background-color: #23888e;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_fef32_row2_col8, #T_fef32_row8_col2 {\n",
              "  background-color: #1f9f88;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_fef32_row3_col6, #T_fef32_row4_col5, #T_fef32_row5_col4, #T_fef32_row6_col3 {\n",
              "  background-color: #1f948c;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_fef32_row3_col8, #T_fef32_row7_col8, #T_fef32_row8_col3, #T_fef32_row8_col7 {\n",
              "  background-color: #25858e;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_fef32_row4_col7, #T_fef32_row7_col4 {\n",
              "  background-color: #1f988b;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_fef32_row6_col7, #T_fef32_row7_col6 {\n",
              "  background-color: #440154;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_fef32_row6_col8, #T_fef32_row8_col6 {\n",
              "  background-color: #29798e;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "</style>\n",
              "<table id=\"T_fef32\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th class=\"blank level0\" >&nbsp;</th>\n",
              "      <th id=\"T_fef32_level0_col0\" class=\"col_heading level0 col0\" >MedInc</th>\n",
              "      <th id=\"T_fef32_level0_col1\" class=\"col_heading level0 col1\" >HouseAge</th>\n",
              "      <th id=\"T_fef32_level0_col2\" class=\"col_heading level0 col2\" >AveRooms</th>\n",
              "      <th id=\"T_fef32_level0_col3\" class=\"col_heading level0 col3\" >AveBedrms</th>\n",
              "      <th id=\"T_fef32_level0_col4\" class=\"col_heading level0 col4\" >Population</th>\n",
              "      <th id=\"T_fef32_level0_col5\" class=\"col_heading level0 col5\" >AveOccup</th>\n",
              "      <th id=\"T_fef32_level0_col6\" class=\"col_heading level0 col6\" >Latitude</th>\n",
              "      <th id=\"T_fef32_level0_col7\" class=\"col_heading level0 col7\" >Longitude</th>\n",
              "      <th id=\"T_fef32_level0_col8\" class=\"col_heading level0 col8\" >PRICE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th id=\"T_fef32_level0_row0\" class=\"row_heading level0 row0\" >MedInc</th>\n",
              "      <td id=\"T_fef32_row0_col0\" class=\"data row0 col0\" >1.00</td>\n",
              "      <td id=\"T_fef32_row0_col1\" class=\"data row0 col1\" >-0.12</td>\n",
              "      <td id=\"T_fef32_row0_col2\" class=\"data row0 col2\" >0.33</td>\n",
              "      <td id=\"T_fef32_row0_col3\" class=\"data row0 col3\" >-0.06</td>\n",
              "      <td id=\"T_fef32_row0_col4\" class=\"data row0 col4\" >0.00</td>\n",
              "      <td id=\"T_fef32_row0_col5\" class=\"data row0 col5\" >0.02</td>\n",
              "      <td id=\"T_fef32_row0_col6\" class=\"data row0 col6\" >-0.08</td>\n",
              "      <td id=\"T_fef32_row0_col7\" class=\"data row0 col7\" >-0.02</td>\n",
              "      <td id=\"T_fef32_row0_col8\" class=\"data row0 col8\" >0.69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_fef32_level0_row1\" class=\"row_heading level0 row1\" >HouseAge</th>\n",
              "      <td id=\"T_fef32_row1_col0\" class=\"data row1 col0\" >-0.12</td>\n",
              "      <td id=\"T_fef32_row1_col1\" class=\"data row1 col1\" >1.00</td>\n",
              "      <td id=\"T_fef32_row1_col2\" class=\"data row1 col2\" >-0.15</td>\n",
              "      <td id=\"T_fef32_row1_col3\" class=\"data row1 col3\" >-0.08</td>\n",
              "      <td id=\"T_fef32_row1_col4\" class=\"data row1 col4\" >-0.30</td>\n",
              "      <td id=\"T_fef32_row1_col5\" class=\"data row1 col5\" >0.01</td>\n",
              "      <td id=\"T_fef32_row1_col6\" class=\"data row1 col6\" >0.01</td>\n",
              "      <td id=\"T_fef32_row1_col7\" class=\"data row1 col7\" >-0.11</td>\n",
              "      <td id=\"T_fef32_row1_col8\" class=\"data row1 col8\" >0.11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_fef32_level0_row2\" class=\"row_heading level0 row2\" >AveRooms</th>\n",
              "      <td id=\"T_fef32_row2_col0\" class=\"data row2 col0\" >0.33</td>\n",
              "      <td id=\"T_fef32_row2_col1\" class=\"data row2 col1\" >-0.15</td>\n",
              "      <td id=\"T_fef32_row2_col2\" class=\"data row2 col2\" >1.00</td>\n",
              "      <td id=\"T_fef32_row2_col3\" class=\"data row2 col3\" >0.85</td>\n",
              "      <td id=\"T_fef32_row2_col4\" class=\"data row2 col4\" >-0.07</td>\n",
              "      <td id=\"T_fef32_row2_col5\" class=\"data row2 col5\" >-0.00</td>\n",
              "      <td id=\"T_fef32_row2_col6\" class=\"data row2 col6\" >0.11</td>\n",
              "      <td id=\"T_fef32_row2_col7\" class=\"data row2 col7\" >-0.03</td>\n",
              "      <td id=\"T_fef32_row2_col8\" class=\"data row2 col8\" >0.15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_fef32_level0_row3\" class=\"row_heading level0 row3\" >AveBedrms</th>\n",
              "      <td id=\"T_fef32_row3_col0\" class=\"data row3 col0\" >-0.06</td>\n",
              "      <td id=\"T_fef32_row3_col1\" class=\"data row3 col1\" >-0.08</td>\n",
              "      <td id=\"T_fef32_row3_col2\" class=\"data row3 col2\" >0.85</td>\n",
              "      <td id=\"T_fef32_row3_col3\" class=\"data row3 col3\" >1.00</td>\n",
              "      <td id=\"T_fef32_row3_col4\" class=\"data row3 col4\" >-0.07</td>\n",
              "      <td id=\"T_fef32_row3_col5\" class=\"data row3 col5\" >-0.01</td>\n",
              "      <td id=\"T_fef32_row3_col6\" class=\"data row3 col6\" >0.07</td>\n",
              "      <td id=\"T_fef32_row3_col7\" class=\"data row3 col7\" >0.01</td>\n",
              "      <td id=\"T_fef32_row3_col8\" class=\"data row3 col8\" >-0.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_fef32_level0_row4\" class=\"row_heading level0 row4\" >Population</th>\n",
              "      <td id=\"T_fef32_row4_col0\" class=\"data row4 col0\" >0.00</td>\n",
              "      <td id=\"T_fef32_row4_col1\" class=\"data row4 col1\" >-0.30</td>\n",
              "      <td id=\"T_fef32_row4_col2\" class=\"data row4 col2\" >-0.07</td>\n",
              "      <td id=\"T_fef32_row4_col3\" class=\"data row4 col3\" >-0.07</td>\n",
              "      <td id=\"T_fef32_row4_col4\" class=\"data row4 col4\" >1.00</td>\n",
              "      <td id=\"T_fef32_row4_col5\" class=\"data row4 col5\" >0.07</td>\n",
              "      <td id=\"T_fef32_row4_col6\" class=\"data row4 col6\" >-0.11</td>\n",
              "      <td id=\"T_fef32_row4_col7\" class=\"data row4 col7\" >0.10</td>\n",
              "      <td id=\"T_fef32_row4_col8\" class=\"data row4 col8\" >-0.02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_fef32_level0_row5\" class=\"row_heading level0 row5\" >AveOccup</th>\n",
              "      <td id=\"T_fef32_row5_col0\" class=\"data row5 col0\" >0.02</td>\n",
              "      <td id=\"T_fef32_row5_col1\" class=\"data row5 col1\" >0.01</td>\n",
              "      <td id=\"T_fef32_row5_col2\" class=\"data row5 col2\" >-0.00</td>\n",
              "      <td id=\"T_fef32_row5_col3\" class=\"data row5 col3\" >-0.01</td>\n",
              "      <td id=\"T_fef32_row5_col4\" class=\"data row5 col4\" >0.07</td>\n",
              "      <td id=\"T_fef32_row5_col5\" class=\"data row5 col5\" >1.00</td>\n",
              "      <td id=\"T_fef32_row5_col6\" class=\"data row5 col6\" >0.00</td>\n",
              "      <td id=\"T_fef32_row5_col7\" class=\"data row5 col7\" >0.00</td>\n",
              "      <td id=\"T_fef32_row5_col8\" class=\"data row5 col8\" >-0.02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_fef32_level0_row6\" class=\"row_heading level0 row6\" >Latitude</th>\n",
              "      <td id=\"T_fef32_row6_col0\" class=\"data row6 col0\" >-0.08</td>\n",
              "      <td id=\"T_fef32_row6_col1\" class=\"data row6 col1\" >0.01</td>\n",
              "      <td id=\"T_fef32_row6_col2\" class=\"data row6 col2\" >0.11</td>\n",
              "      <td id=\"T_fef32_row6_col3\" class=\"data row6 col3\" >0.07</td>\n",
              "      <td id=\"T_fef32_row6_col4\" class=\"data row6 col4\" >-0.11</td>\n",
              "      <td id=\"T_fef32_row6_col5\" class=\"data row6 col5\" >0.00</td>\n",
              "      <td id=\"T_fef32_row6_col6\" class=\"data row6 col6\" >1.00</td>\n",
              "      <td id=\"T_fef32_row6_col7\" class=\"data row6 col7\" >-0.92</td>\n",
              "      <td id=\"T_fef32_row6_col8\" class=\"data row6 col8\" >-0.14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_fef32_level0_row7\" class=\"row_heading level0 row7\" >Longitude</th>\n",
              "      <td id=\"T_fef32_row7_col0\" class=\"data row7 col0\" >-0.02</td>\n",
              "      <td id=\"T_fef32_row7_col1\" class=\"data row7 col1\" >-0.11</td>\n",
              "      <td id=\"T_fef32_row7_col2\" class=\"data row7 col2\" >-0.03</td>\n",
              "      <td id=\"T_fef32_row7_col3\" class=\"data row7 col3\" >0.01</td>\n",
              "      <td id=\"T_fef32_row7_col4\" class=\"data row7 col4\" >0.10</td>\n",
              "      <td id=\"T_fef32_row7_col5\" class=\"data row7 col5\" >0.00</td>\n",
              "      <td id=\"T_fef32_row7_col6\" class=\"data row7 col6\" >-0.92</td>\n",
              "      <td id=\"T_fef32_row7_col7\" class=\"data row7 col7\" >1.00</td>\n",
              "      <td id=\"T_fef32_row7_col8\" class=\"data row7 col8\" >-0.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_fef32_level0_row8\" class=\"row_heading level0 row8\" >PRICE</th>\n",
              "      <td id=\"T_fef32_row8_col0\" class=\"data row8 col0\" >0.69</td>\n",
              "      <td id=\"T_fef32_row8_col1\" class=\"data row8 col1\" >0.11</td>\n",
              "      <td id=\"T_fef32_row8_col2\" class=\"data row8 col2\" >0.15</td>\n",
              "      <td id=\"T_fef32_row8_col3\" class=\"data row8 col3\" >-0.05</td>\n",
              "      <td id=\"T_fef32_row8_col4\" class=\"data row8 col4\" >-0.02</td>\n",
              "      <td id=\"T_fef32_row8_col5\" class=\"data row8 col5\" >-0.02</td>\n",
              "      <td id=\"T_fef32_row8_col6\" class=\"data row8 col6\" >-0.14</td>\n",
              "      <td id=\"T_fef32_row8_col7\" class=\"data row8 col7\" >-0.05</td>\n",
              "      <td id=\"T_fef32_row8_col8\" class=\"data row8 col8\" >1.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### In the last column, note how much the target correlates with the Median Income feature (surprised?)"
      ],
      "metadata": {
        "id": "rSJ4cSDpLQIM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **2. Let's plot the histograms for some variables as well:**"
      ],
      "metadata": {
        "id": "gqqLcBVSLYBT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Let's plot the histograms for some variables as well\n",
        "_ = plt.figure(figsize=(15, 5))\n",
        "ax1 = plt.subplot(1,3,1)\n",
        "# the argument \"bins\" determines how many \"bars\" we want to see in the histograms\n",
        "# more bins means a finer subdivision of the data (kind of higher resolution)\n",
        "_ = ax1.hist(df['AveRooms'], bins= 50)\n",
        "_ = ax1.set_xlabel('Avg # of rooms')\n",
        "\n",
        "# plot number of rooms again and focus on low values\n",
        "ax2= plt.subplot(1,3,2)\n",
        "_ = ax2.hist(df['AveRooms'], bins= 50)\n",
        "_ = ax2.set_xlabel('Avg # of rooms')\n",
        "_ = ax2.set_xlim([0,20])\n",
        "\n",
        "# plot the median income\n",
        "ax3 = plt.subplot(1,3,3)\n",
        "_ = ax3.hist(df['MedInc'], bins= 50)\n",
        "_ = ax3.set_xlabel('Median Income')\n",
        "\n",
        "# _ = ax2.scatter(df['AveRooms'], df['MedInc'])\n",
        "# _ = ax2.set_title('Avg # of rooms vs Median Income')\n",
        "# _ = ax2.set_xlabel('Avg # of rooms')\n",
        "# _ = ax2.set_ylabel('Median Income')\n",
        "\n",
        "#plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        },
        "id": "5CZUpvLODFKn",
        "outputId": "7c9ee0c6-4e24-4bad-8e2a-c9340ae92026"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### wait a second. The average number of rooms can reach hundreds? (Note how far the x axis stretches, and well done if you spotted this already when we called .describe()). What's going on?"
      ],
      "metadata": {
        "id": "rHOVbnMvMUEz"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### For lack of better information we will go with the threshold of 20 and filter our dataset.\n",
        "\n",
        "### **Note that we could have made different decisions here. What if we are interested in keeping those outliers? Maybe they represent the exact segment of the market an estate agency is interested in**"
      ],
      "metadata": {
        "id": "p_aoW5xdMZXC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "max_rooms = 10\n",
        "filtered_df = df[df['AveRooms']<=max_rooms].copy()"
      ],
      "metadata": {
        "id": "6Pid3-aTLwQw"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "filtered_df.head(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "qWOlp2VaRpRx",
        "outputId": "790db4c7-1e14-4241-9eac-5bcceac4940f"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   MedInc  HouseAge  AveRooms  AveBedrms  Population  AveOccup  Latitude  \\\n",
              "0  8.3252      41.0  6.984127   1.023810       322.0  2.555556     37.88   \n",
              "1  8.3014      21.0  6.238137   0.971880      2401.0  2.109842     37.86   \n",
              "2  7.2574      52.0  8.288136   1.073446       496.0  2.802260     37.85   \n",
              "\n",
              "   Longitude  PRICE  \n",
              "0    -122.23  4.526  \n",
              "1    -122.22  3.585  \n",
              "2    -122.24  3.521  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-c333193e-be39-4220-932f-507e4ab59206\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MedInc</th>\n",
              "      <th>HouseAge</th>\n",
              "      <th>AveRooms</th>\n",
              "      <th>AveBedrms</th>\n",
              "      <th>Population</th>\n",
              "      <th>AveOccup</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "      <th>PRICE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>8.3252</td>\n",
              "      <td>41.0</td>\n",
              "      <td>6.984127</td>\n",
              "      <td>1.023810</td>\n",
              "      <td>322.0</td>\n",
              "      <td>2.555556</td>\n",
              "      <td>37.88</td>\n",
              "      <td>-122.23</td>\n",
              "      <td>4.526</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8.3014</td>\n",
              "      <td>21.0</td>\n",
              "      <td>6.238137</td>\n",
              "      <td>0.971880</td>\n",
              "      <td>2401.0</td>\n",
              "      <td>2.109842</td>\n",
              "      <td>37.86</td>\n",
              "      <td>-122.22</td>\n",
              "      <td>3.585</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7.2574</td>\n",
              "      <td>52.0</td>\n",
              "      <td>8.288136</td>\n",
              "      <td>1.073446</td>\n",
              "      <td>496.0</td>\n",
              "      <td>2.802260</td>\n",
              "      <td>37.85</td>\n",
              "      <td>-122.24</td>\n",
              "      <td>3.521</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c333193e-be39-4220-932f-507e4ab59206')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-010cb83b-236f-41e6-b5ce-eb2b74a4ad1b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-010cb83b-236f-41e6-b5ce-eb2b74a4ad1b')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-010cb83b-236f-41e6-b5ce-eb2b74a4ad1b button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c333193e-be39-4220-932f-507e4ab59206 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c333193e-be39-4220-932f-507e4ab59206');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# let's now look at the PRICE [target] distribution (how far away from a normal distribution do you think it is?)\n",
        "_ = plt.figure(figsize=(10, 5))\n",
        "_ = plt.hist(filtered_df['PRICE'], bins=20)\n",
        "title = \"Price histogram: mean = {:0.2f},  std = {:0.2f}\".format(filtered_df['PRICE'].mean(),\n",
        "                                                                 filtered_df['PRICE'].std())\n",
        "_ = plt.title(title)\n",
        "_ = plt.xlabel('House Price')\n",
        "_ = plt.ylabel('Frequency')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "oFlGsJLKMoIN",
        "outputId": "f96359a7-5ad9-4e74-bb3f-24062a5a647d"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Exercise 1**\n",
        "\n",
        "Do you notice anything strange in the histogram? If so, what could be happening here and how would you deal with it?\n",
        "\n",
        "If you decide to do some further filtering, please still call your final variable `filtered_df` or make the appropriate modifications in the cell below.\n",
        "\n",
        "Also, feel free to do more EDA if you want. Any interesting results, let us know!"
      ],
      "metadata": {
        "id": "kElFs4cBSh-5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# there seems to be a cap at 5.00001 (probably for systems limitations, as the data is\n",
        "# taken from census).\n",
        "print(filtered_df['PRICE'].value_counts())\n",
        "maxprice = filtered_df['PRICE'].max()\n",
        "filtered_df[filtered_df.PRICE<maxprice].PRICE.hist()\n",
        "# You can decide to exclude those datapoint:\n",
        "# filtered_df = filtered_df[filtered_df.PRICE<maxprice]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 656
        },
        "id": "05z4bM-JMpub",
        "outputId": "e99e8d7d-ab14-473c-8f72-1015305b6f46"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5.00001    952\n",
            "1.37500    117\n",
            "1.62500    111\n",
            "1.12500    103\n",
            "2.25000     91\n",
            "          ... \n",
            "3.54900      1\n",
            "3.07800      1\n",
            "3.04900      1\n",
            "4.54300      1\n",
            "0.47000      1\n",
            "Name: PRICE, Length: 3836, dtype: int64\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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69at2r9/v4YPHy5J+vOf/6z77rtPf/zjH5WUlKS1a9fq4sWLeuONNxQbG6vbb79dVVVVevnll/2CDgAAiEwBB5irOXHihFwulzIyMnzr4uPjNXLkSFVUVOjhhx9WRUWFunXr5gsvkpSRkaHo6Gh98skn+tWvfqWKigqNHj1asbGxvpqsrCz94Q9/0D//+U/dcMMNzZ7b4/HI4/H4lt1utyTJ6/XK6/U2q29ad7lt7ZE1pjHcLcga3ej3L4KPmYdee5u5CcfISDuetwXBnPm17rNVA4zL5ZIkJSYm+q1PTEz0bXO5XEpISPBvokMHde/e3a8mNTW12T6atl0uwCxZskQLFy5str6srExxcXFX7NnpdLb0stqFwhHh7uBfFg9vCHcLEYeZh157mfmWLVvC3cI1i5TjeVsSjJmfP3/+mupaNcCEU35+vvLy8nzLbrdbycnJyszMlM1ma1bv9XrldDo1fvx4WSyWULYaFgMKSsPdgqzRjVo8vEHPHoiWpyEq3O1EBGYeeu1t5kcKssLdQosi7XjeFgRz5k1XUFrSqgHGbrdLkmpqatSzZ0/f+pqaGg0ePNhXU1tb6/e4S5cu6fvvv/c93m63q6amxq+mabmp5uesVqusVmuz9RaL5arDbWl7e+GpbzsHUk9DVJvqJxIw89BrLzM36fgYKcfztiQYM7/W/bXq58CkpqbKbrervLzct87tduuTTz6Rw+GQJDkcDp0+fVqVlZW+mu3bt6uhoUEjR4701ezatcvvOpjT6VTfvn0ve/kIAABEloADzLlz51RVVaWqqipJP964W1VVperqakVFRWnWrFl6/vnn9be//U2HDx/WlClTlJSUpAceeECS1L9/f91777168skntW/fPn388ceaOXOmHn74YSUlJUmSHn30UcXGxmratGk6evSo1q9frxUrVvhdIgIAAJEr4EtIBw4c0D333ONbbgoVU6dOVXFxsebOnau6ujo99dRTOn36tO666y5t3bpVHTt29D1m7dq1mjlzpsaNG6fo6Gjl5OToT3/6k297fHy8ysrKlJubq2HDhunGG2/UggULeAs1AACQdB0BZsyYMWpsvPLbA6OiorRo0SItWrToijXdu3fXunXrrvo86enp+uijjwJtDwAARAD+FhIAADAOAQYAABiHAAMAAIxDgAEAAMZpN5/EG0o3P1MS7hYAAIho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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 3. Modelling\n",
        "\n",
        "Note that this **dataset is mostly \"clean\"**. We don't have to fill in missing values or encode categorical features. **We still need to standardize the numerical features though.**\n",
        "\n",
        "Note that scikit-learn has two functions that can implement linear regression. One is LinearRegression that implements batch learning and compute the optimal solution for linear regression models. For large datasets, it might be best to use [`SGDRegressor`](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDRegressor.html), which implements a whole family of linear models trained via online learning (using gradient descent). This family of linear models include the linear regression model we saw in class: the default argument loss= 'squared_error' is the same loss function as linear regression. The learning_rate is another hyper-parameter that we can change (in this case combined with the argument `eta0`)."
      ],
      "metadata": {
        "id": "872zq3IES_Ph"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import SGDRegressor, LinearRegression\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# dropping the PRICE column [target variable]\n",
        "X = filtered_df.drop(['PRICE'], axis = 1)\n",
        "y = filtered_df['PRICE']\n",
        "\n",
        "# separating of training and testing set: 80-20 separation\n",
        "# random_state parameter is given to keep the same randomised splitting: important when you are creating the model\n",
        "# and want to keep a specific separation across multiple runs.\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,\n",
        "                                                    shuffle= True, random_state=42)\n",
        "\n",
        "# standardisation of the features: extremely important so that the effect of 'magnitude difference' between features do not affect the optimisation of weights\n",
        "# some are not given more importance just because of higher magnitude?\n",
        "sc = StandardScaler()\n",
        "X_train = sc.fit_transform(X_train)\n",
        "X_test = sc.transform(X_test)\n",
        "\n",
        "#**************************************************************************************************************************************************************************\n",
        "\n",
        "# instance of linear regression model\n",
        "lr = SGDRegressor(learning_rate= 'constant', eta0= 0.0001)\n",
        "# note: eta0 is the value of the initial learning rate and we set it to be constant for all the training\n",
        "lr.fit(X_train, y_train) # fitting on our dataset\n",
        "\n",
        "# the next part is just used to display the weights we have obtained for LinearRegression for features and the intercept\n",
        "arr = (list(df.columns) + ['INTERCEPT'])\n",
        "arr.remove('PRICE')\n",
        "w_coef = np.append(lr.coef_, lr.intercept_)\n",
        "\n",
        "df_weights = pd.DataFrame(data = [list(w_coef)], columns=arr)\n",
        "print(df_weights.head(1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8FBReg87Ssrq",
        "outputId": "9627bfa4-1861-4dc9-c207-f149d222934a"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    MedInc  HouseAge  AveRooms  AveBedrms  Population  AveOccup  Latitude  \\\n",
            "0  0.92575  0.142505 -0.213978   0.173117    0.005612 -0.047891 -0.705274   \n",
            "\n",
            "   Longitude  INTERCEPT  \n",
            "0   -0.69831   2.071789  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **4. Evaluation**\n",
        "Remember that the RMSE is the square root of the Mean Squared Error (MSE) between target values (what the real values are) and prediction values (what the ML model guesses the values are). MSE is the average of the squared difference (errors) between target and predictions. We take the square because this way all errors are positive and add up. We want low values of the MSE.\n",
        "\n",
        "The R2 score is another way to measure how well a regression model performs. The most important thing to know is that it can be a maximum of 1 and that we want as high a value as possible. If the R2 score is 0, or even negative, the model does not perform well."
      ],
      "metadata": {
        "id": "Dwmv_F9bTfSJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "# model evaluation for training set\n",
        "y_train_predict = lr.predict(X_train)\n",
        "# R\n",
        "rmse = np.sqrt(mean_squared_error(y_train, y_train_predict))\n",
        "r2 = r2_score(y_train, y_train_predict)\n",
        "\n",
        "print(\"Training SET\")\n",
        "print(\"--------------------------------------\")\n",
        "print('RMSE is {}'.format(rmse))\n",
        "print('R2 score is {}'.format(r2))\n",
        "\n",
        "# two dimensional dictionary: to store the evaluation results\n",
        "eval = {}\n",
        "eval['training']  = {}\n",
        "eval['training']['lr'] = [rmse, r2] # a list\n",
        "\n",
        "# model evaluation for testing set\n",
        "y_test_predict = lr.predict(X_test)\n",
        "rmse = np.sqrt(mean_squared_error(y_test, y_test_predict))\n",
        "r2 = r2_score(y_test, y_test_predict)\n",
        "\n",
        "print(\"\\nTesting SET\")\n",
        "print(\"--------------------------------------\")\n",
        "print('RMSE is {}'.format(rmse))\n",
        "print('R2 score is {}'.format(r2))\n",
        "\n",
        "eval['testing']  = {}\n",
        "eval['testing']['lr'] = [rmse, r2]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zatbr3_bTPdE",
        "outputId": "b8ac0629-a635-4102-a05c-55885152a8f5"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training SET\n",
            "--------------------------------------\n",
            "RMSE is 0.7154381192569231\n",
            "R2 score is 0.6142074724530265\n",
            "\n",
            "Testing SET\n",
            "--------------------------------------\n",
            "RMSE is 0.7190389534484029\n",
            "R2 score is 0.6158378114950394\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Quick note: the r2_score is the evaluation score that is used by default by scikit-learn and it's included in the predictor class itself. Specfically, it can be accessed from the trained model by calling its attribute function .score(X,y). For example lr.score(X_test, y_test). Behind the scenes, sklearn will make predictions from X_test using the trained model and compare those with y_test using the r2 score. Let's check:"
      ],
      "metadata": {
        "id": "HfQ_pvBpUILY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# compute r2 score with its function\n",
        "print(r2_score(y_test, y_test_predict))\n",
        "# compute r2 score via sklearn in-built .score function\n",
        "print(lr.score(X_test,y_test))\n",
        "# results should be the same"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kOxF_aS4Tm3k",
        "outputId": "98b924e5-e443-408d-ee97-4badf4cc8e76"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.6158378114950394\n",
            "0.6158378114950394\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **5. Scatter plot of predictions**\n",
        "* some graphs for final analysis of our results:\n",
        "* it can be seen that the estimator's output can be approximated as normal distribution looking at the histogram and boxplot?\n",
        "* this will give some useful analysis on the results (inside the 'More Interpretation' slides of lecture notes)"
      ],
      "metadata": {
        "id": "yOPqqzWsUNWY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import norm\n",
        "\n",
        "_ = plt.figure(figsize=(10, 5))\n",
        "\n",
        "ax1 = plt.subplot(121)\n",
        "_ = ax1.scatter(y_train, y_train_predict)\n",
        "_ = ax1.set_title('Scatter plot: training set estimation')\n",
        "_ = ax1.set_xlabel('House Price (target)')\n",
        "_ = ax1.set_ylabel('House Price (predicted)')\n",
        "\n",
        "ax2 = plt.subplot(122)\n",
        "_ = ax2.scatter(y_test, y_test_predict)\n",
        "_ = ax2.set_title('Scatter plot: test set estimation')\n",
        "_ = ax2.set_xlabel('House Price (target)')\n",
        "_ = ax2.set_ylabel('House Price (predicted)')\n",
        "\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "yZ6C6MrzUKWY",
        "outputId": "35e0ab23-13e6-4ac4-bfcc-60ebeb6e7bb2"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}